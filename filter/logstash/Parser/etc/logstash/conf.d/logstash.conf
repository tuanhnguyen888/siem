input 
{
     kafka {
        bootstrap_servers => "localhost:9091,localhost:9092,localhost:9093"
        topics => ["log_raw"]
        codec => json
     }
}

## Add your filters / logstash plugins configuration here
filter
{
    if "cloudtrail" in [provider]
    {

        mutate
        {
            rename =>
            {
                "log_raw" => "raw_json"
            }

            add_field =>
            {
                "device_product" => "AWS Cloudtrail"
                "device_vendor"  => "AWS"
            }
        }

        json
        {
            source => "raw_json"
            target => "event"
        }
        mutate
        {
            copy =>
            {
                '[event][eventTime]' => "event_creation_time"
                '[event][eventVersion]' => "event_version"

                '[event][userIdentity][principalId]' => "principal_id"
                '[event][userIdentity][invokedBy]'  => "invoked_by"
                '[event][userIdentity][userName]'  => "user_name"
                '[event][userIdentity][accountId]' => "account_id"
                '[event][userIdentity][arn]' => "arn"
                '[event][userIdentity][type]' => "type"
                '[event][userIdentity][accessKeyId]' => "access_key_id"
                '[event][userIdentity][sessionContext]' => "tmp_session_context"
                '[event][userIdentity][onBehalfOf]' => "on_behalf_off"
                '[event][userIdentity][credentialId]' => "creadential_id"

                '[event][responseElements]' => 'tmp_response_elements'
                '[event][requestParameters]' => 'tmp_request_parameters'
                '[event][resources]' => 'tmp_resources'

                '[event][eventSource]'  => "event_source"
                '[event][eventName]'  => "event_name"
                '[event][awsRegion]'  => "region"
                '[event][sourceIPAddress]'  => "src"
                '[event][userAgent]'  => "user_agent_original"
                '[event][requestID]'   => "request_id"
                '[event][eventID]'   => "event_log_id"
                '[event][eventType]'   => "event_type"
                '[event][apiVersion]'   => "api_version"
                '[event][managementEvent]'   => "management_event"
                '[event][readOnly]'   => "read_only"
                '[event][recipientAccountId]'   => "recipient_account_id"
                '[event][sharedEventID]' => "share_event_id"
                '[event][eventCategory]' => "event_category"
                '[event][sessionCredentialFromConsole]' => "event_from_console"
                '[event][errorCode]'  => "error_code"
                '[event][errorMessage]'  => "error_message"
                '[event][additionalEventData]' => "tmp_add_event_data"
                '[event][serviceEventDetails]' => "tmp_service_info"
                '[event][vpcEndpointId]' => "vpc_endpoint_id"
                '[event][addendum]' => "tmp_addendum"
                '[event][edgeDeviceDetails]' => "edge_device"
                '[event][tlsDetails]' => "tmp_tls_details"
                '[event][insightDetails]' => "tmp_insight_details"

                '[event][awsAccountId]' => "account_id"
                '[event][digestStartTime]' => "digest_start_time"
                '[event][digestEndTime]' => "digest_end_time"
                '[event][digestS3Bucket]' => "digest_s3_bucket"
                '[event][digestS3Object]' => "digest_s3_object"
                '[event][digestPublicKeyFingerprint]' => "digest_public_key_fingerprint"
                '[event][digestSignatureAlgorithm]' => "digest_signature_algorithm"
                '[event][newestEventTime]' => "newest_event_time"
                '[event][oldestEventTime]' => "oldest_event_time"
                '[event][previousDigestS3Bucket]' => "previous_digest_s3_bucket"
                '[event]previousDigestS3Object]' => "previousDigest_s3_object"
                '[event][previousDigestHashValue]' => "previous_digest_hashValue"
                '[event][previousDigestHashAlgorithm]' => "previous_digest_dash_algorithm"
                '[event][previousDigestSignature]' => "previous_digest_signature"
                '[event][logFiles]' => "log_files"

            }

        }
        mutate
        {
            copy =>
            {
                "src_ip_addr" => "src"
                "arn" => "file_path"
            }
        }
        if [tmp_add_event_data]
        {
            ruby
            {
                code =>
                "
                    begin
                        event.set('add_event_data', event.get('tmp_add_event_data').to_s)
                    rescue Exception => e
                        puts 'Exception orcured %s %s' % [ event.get('message'), e]
                    end
                "
            }
        }
        if [tmp_session_context]
        {
            ruby
            {
                code =>
                "
                    begin
                        event.set('session_context', event.get('tmp_session_context').to_s)
                    end
                "
            }
        }

        if [tmp_service_info]
        {
            ruby
            {
                code =>
                "
                    begin
                        event.set('service_info', event.get('tmp_service_info').to_s)
                    end
                "
            }
        }
        if [tmp_addendum]
        {
            ruby
            {
                code =>
                "
                    begin
                        event.set('addendum', event.get('tmp_addendum').to_s)
                    end
                "
            }
        }
        if [tmp_tls_details]
        {
            ruby
            {
                code =>
                "
                    begin
                        event.set('tls_details', event.get('tmp_tls_details').to_s)
                    end
                "
            }
        }
        if [tmp_insight_details]
        {
            ruby
            {
                code =>
                "
                    begin
                        event.set('insight_details', event.get('tmp_insight_details').to_s)
                    end
                "
            }
        }
        if [tmp_resources]
        {
            ruby
            {
                code =>
                "
                    begin
                        event.set('resources', event.get('tmp_resources').to_s)
                    end
                "
            }
        }
        if [digest_start_time]
        {
            date
            {
                match =>
                [
                    "digest_start_time","ISO8601","yyyy-MM-dd'T'HH:mm:ssZ"
                ]
                target => "log_time"
            }
            ruby
            {
                code =>
                "
                    event.set('local_timestamp', (event.get('log_time').to_f * 1000).to_i)
                "
            }
        }
        else if [event_creation_time]
        {
            date
            {
                match =>
                [
                    "event_creation_time","ISO8601","yyyy-MM-dd'T'HH:mm:ssZ"
                ]
                target => "log_time"
            }

            ruby
            {
                code =>
                "
                    begin
                        event.set('local_timestamp', (event.get('log_time').to_f * 1000).to_i)
                    end
                "
            }
        }

        #requestParameters
        if [tmp_request_parameters]
        {
            mutate
            {
                copy =>
                {
                    '[event][requestParameters][policyDocument]' => 'request_policy_document'
                    '[event][requestParameters][userData]' => 'request_user_data'
                    '[event][requestParameters][ipPermissions]' => 'tmp_request_ip_permissions'
                    '[event][requestParameters][[userName]' => 'user_name'
                    '[event][requestParameters][instanceId]' => 'request_instance_id'
                    '[event][requestParameters][policy]' => 'request_policy'
                    '[event][requestParameters][Host]' => 'request_host'
                    '[event][requestParameters][bucketName]' => 'request_bucket_name'
                    '[event][requestParameters][key]' => 'request_key'
                    '[event][requestParameters][groupName]' => 'group_name'
                    '[event][requestParameters][groupId]' => 'request_group_id'
                    '[event][requestParameters][policyArn]' => 'request_policy_arn'
                    '[event][requestParameters][groupDescription]' => 'request_group_description'
                    '[event][requestParameters][vpcId]' => 'request_vpc_id'
                    '[event][requestParameters][attribute]' => 'request_attribute'
                    '[event][requestParameters][value]' => 'request_value'
                    '[event][requestParameters][ModifySecurityGroupRulesRequest][GroupId]' => 'request_sg_rule_group_id'
                    '[event][requestParameters][ModifySecurityGroupRulesRequest][SecurityGroupRule]' => 'tmp_request_sg_rule'
                    '[event][requestParameters][ModifySecurityGroupRulesRequest][SecurityGroupRuleId]' => 'request_sg_rule_id'
                    '[event][requestParameters][challengeName]' => 'request_challenge_name'
                    '[event][requestParameters][challengeResponses]' => 'request_challenge_responses'
                    '[event][requestParameters][clientId]' => 'request_client_id'
                    '[event][requestParameters][agentName]' => 'request_agent_name'
                    '[event][requestParameters][computerName]' => 'request_computer_name'
                    '[event][requestParameters][iPAddress]' => 'request_ip_address'
                    '[event][requestParameters][platformName]' => 'request_platform_name'
                    '[event][requestParameters][platformType]' => 'request_platform_type'


                }
            }
            mutate
            {
                copy =>
                {
                    "user_name" => "suser"
                    "request_client_id" => "client_id"
                    "request_ip_address" => "src"
                    "request_computer_name" => "computer_name"
                }
            }

            ruby
            {
                code =>
                "
                    begin
                        event.set('request_parameters', event.get('tmp_request_parameters').to_s)
                    end
                "
            }
            if [tmp_request_ip_permissions]
            {
                ruby
                {
                    code =>
                    "
                        begin
                            event.set('request_ip_permissions', event.get('tmp_request_ip_permissions').to_s)
                        end
                    "
                }
            }
            if [tmp_request_sg_rule]
            {
                ruby
                {
                    code =>
                    "
                        begin
                            event.set('request_sg_rule', event.get('tmp_request_sg_rule').to_s)
                        end
                    "
                }
            }
        }

        #responseElements
        if [tmp_response_elements]
        {
            mutate
            {
                copy =>
                {
                    '[tmp_response_elements][x-amz-copy-source-version-id]' => 'response_source_version_id'
                    '[tmp_response_elements][x-amz-server-side-encryption]' => 'response_server_side_encryption'
                    '[tmp_response_elements][x-amz-server-side-encryption-aws-kms-key-id]' => 'respone_side_encryption_aws_kms_key_id'
                    '[tmp_response_elements][x-amz-version-id]' => 'response_version_id'
                    '[tmp_response_elements][publiclyAccessible]' => 'response_publicly_accessible'
                    '[tmp_response_elements][requestId]' => 'response_request_id'


                }
            }
            ruby
            {
                code =>
                "
                    begin
                        event.set('response_elements', event.get('tmp_response_elements').to_s)
                    end
                "
            }
        }
        mutate
        {
            gsub =>
            [
                "response_elements","=>",":",
                "session_context","=>",":",
                "request_parameters","=>",":",
                "resources","=>",":",
                "add_event_data","=>",":",
                "service_info","=>",":",
                "addendum","=>",":",
                "tls_details","=>",":",
                "insight_details","=>",":",
                "request_ip_permissions","=>",":",
                "request_sg_rule","=>",":"
            ]
        }

        mutate
        {
            remove_field =>
            [
                "event","tags","tmp_response_elements","tmp_session_context","tmp_request_parameters",
                "tmp_resources","tmp_add_event_data","tmp_service_info","tmp_addendum","tmp_tls_details","tmp_insight_details",
                "tmp_request_ip_permissions","tmp_request_sg_rule"
            ]

        }
    }

    if "vpc_flow_logs" in [provider]
    {   
        mutate 
        {
            rename => 
            {
                "log_raw" => "raw_log"
            }

            add_field => 
            {
                "device_product" => "AWS Vpc flow logs"
                "device_vendor"  => "AWS"
            }
        }

        csv 
            {
                source => "raw_log"
                columns => ["version","account-id","interface-id","srcaddr","dstaddr","srcport","dstport","protocol","packets","bytes","start","end","action","log-status"]       
                separator => " "
            }

        mutate {
            add_field => { "local_timestamp" => "%{end}" }
        }

        mutate
        {
            add_field => 
            {
                "dst" => "%{dstaddr}"
                "dpt" => "%{dstport}"
                "spt" => "%{srcport}"
                "src" => "%{srcaddr}"
                
            }
        }
 
      
    }

    if "aws_route53" in [provider]
    {   

        if [log_raw] =~ /^\{.*\}$/
        { 
            mutate 
            {
                rename => 
                {
                    "log_raw" => "raw_json"
                }

                add_field => 
                {
                    "device_product" => "AWS Route53 Resolver"
                    "device_vendor"  => "AWS"
                }
            }
            
            json 
            {
                source => "raw_json"
                target => "event"
            }


            mutate
            {
                copy => 
                {
                    '[event][version]' => "log_format_version"
                    '[event][account_id]' => "account_id"

                    '[event][region]' => 'region'
                    '[event][vpc_id]'  => "vpc_id"

                    '[event][query_timestamp]' => 'query_timestamp'                
                    '[event][query_name]'  => "query_name"
                    '[event][query_type]'  => "query_type"
                    '[event][query_class]'  => "query_class"
                    '[event][rcode]'  => "response_code"

                    '[event][answers]'   => "answers_array"
                    '[event][srcaddr]'   => "srcaddr"
                    '[event][srcport]'   => "srcport"
                    '[event][transport]'   => "layer_4_protocol"
                    '[event][srcids]'   => "srcids_json"
        
                }

                add_field => 
                {
                    "spt" => "%{srcport}"
                    "src" => "%{srcaddr}"
                    "proto" => "%{layer_4_protocol}"
                    
                }
            }

            if [query_timestamp]
            {
                date
                {
                    match =>
                    [
                        "query_timestamp","ISO8601","yyyy-MM-dd'T'HH:mm:ssZ"
                    ]
                    target => "log_time"
                }

                ruby
                {
                    code =>
                    "
                        begin
                            event.set('local_timestamp', (event.get('log_time').to_f * 1000).to_i)
                        end
                    "
                }
            }



            if [answers_array]
            {
                mutate
                {
                    gsub => 
                    [
                        "answers_array", "\"","\\\""
                    ]   

                    add_field => 
                    {
                        "answers" => "%{[answers_array]}"
                    }
                }
            }


            if [srcids_json]
            {
                mutate
                {
                    gsub => 
                    [
                        "srcids_json", "\"","\\\""
                    ]

                    add_field => 
                    {
                        "srcids" => "%{[srcids_json]}"
                    }
                }
            }



            mutate 
                {
                    remove_field => 
                    [
                        "event","unix_timestamp","srcids_json","answers_array"
                    ]
                }
        }
        else
        {
            mutate 
            {
                rename => 
                {
                    "log_raw" => "raw_log"
                }

                add_field => 
                {
                    "device_product" => "AWS Route53"
                    "device_vendor"  => "AWS"
                }
            }

            csv 
                {
                    source => "raw_log"
                    columns => ["log_format_version","query_timestamp","hosted_zone_id","query_name","query_type","response_code","layer_4_protocol","route53_edge_location","resolver_ip_address","edns_client_subnet"]    
                    separator => " "
                }

            mutate
            {
                add_field => 
                {
                    "dst" => "%{resolver_ip_address}"
                    "local_timestamp" => "%{create_time_event}"
                }
            }
    
        }
    }
}


output 
{
    stdout
    {
        codec => rubydebug
    }
    kafka
    {
        bootstrap_servers => "localhost:9091,localhost:9092,localhost:9093"
        topic_id => "event"
        codec => json
    }
}

